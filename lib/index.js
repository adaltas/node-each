// Generated by CoffeeScript 2.7.0
var is_object_literal, normalize, normalize_options;

is_object_literal = function(obj) {
  var test;
  test = obj;
  if (typeof obj !== 'object' || obj === null) {
    return false;
  } else {
    if (Object.getPrototypeOf(test) === null) {
      return true;
    }
    while (!false) {
      if (Object.getPrototypeOf(test = Object.getPrototypeOf(test)) === null) {
        break;
      }
    }
    return Object.getPrototypeOf(obj) === test;
  }
};

normalize_options = function(options, argument, position) {
  if (is_object_literal(argument)) {
    return {...options, ...argument};
  } else if (typeof argument === 'function') {
    return {
      ...options,
      handler: argument
    };
  } else if (typeof argument === 'boolean') {
    return {
      ...options,
      concurrency: typeof argument ? -1 : 1
    };
  } else if (typeof argument === 'number') {
    return {
      ...options,
      concurrency: argument
    };
  } else {
    if (!is_object_literal(argument)) {
      throw Error(`Invalid argument: ${position} argument \`option\` must be one of object, boolean or number, got ${JSON.stringify(argument)}`);
    }
  }
};

normalize = function() {
  var elements, options;
  // elements, [options]
  // items, function, [options]
  // items, options, function
  elements = void 0;
  options = {
    concurrency: 1,
    pause: false,
    relax: false
  };
  if (arguments.length === 0) {
    elements = [];
  } else if (arguments.length === 1) {
    if (Array.isArray(arguments[0])) {
      elements = arguments[0];
    } else {
      options = normalize_options(options, arguments[0], 'first');
    }
  } else if (arguments.length === 2) {
    elements = arguments[0];
    options = normalize_options(options, arguments[1], 'second');
  } else if (arguments.length === 3) {
    elements = arguments[0];
    options = normalize_options(options, arguments[1], 'second');
    options = normalize_options(options, arguments[2], 'third');
  } else {
    throw Error("Invalid argument");
  }
  return {
    elements: elements,
    options: options
  };
};

export default function(...args) {
  var all, elements, internal, options, scheduler, stack, state;
  ({elements, options} = normalize.apply(null, arguments));
  stack = [];
  state = {
    error: false,
    paused: options.pause,
    running: 0,
    count: -1
  };
  internal = {
    pump: function() {
      var item;
      if (!stack.length) {
        return;
      }
      if (state.error && !options.relax) {
        while (item = stack.shift()) {
          item.reject.call(null, state.error);
        }
      }
      if (state.paused) {
        return;
      }
      if (options.concurrency > 0 && state.running === options.concurrency) {
        return;
      }
      state.running++;
      item = stack.shift();
      return setImmediate(async function() {
        var error, result;
        try {
          state.count++;
          result = options.handler ? (await options.handler.call(null, item.handler, state.count)) : typeof item.handler === 'function' ? (await item.handler.call()) : (await item.handler);
          state.running--;
          item.resolve.call(null, result);
          return internal.pump();
        } catch (error1) {
          error = error1;
          state.running--;
          state.error = error;
          item.reject.call(null, error);
          return internal.pump();
        }
      });
    }
  };
  all = function(elements, options) {
    return new Promise(function(resolve, reject) {
      var element, isArray;
      isArray = Array.isArray(elements);
      if (isArray) {
        return Promise.all((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = elements.length; i < len; i++) {
            element = elements[i];
            results.push(all(element, options));
          }
          return results;
        })()).then(resolve, reject);
      } else {
        stack.push({
          handler: elements,
          resolve: resolve,
          reject: reject,
          options: options
        });
        return internal.pump();
      }
    });
  };
  scheduler = all(elements);
  scheduler.get = function() {
    if (arguments.length === 0) {
      return {...options};
    }
    if (arguments.length === 1) {
      return options[arguments[0]];
    } else {
      throw Error(`Invalid argument: \`get\` expect one or two arguments, got ${arguments.length}`);
    }
  };
  scheduler.pause = function() {
    state.paused = true;
    return scheduler;
  };
  scheduler.push = function(elements) {
    return all(elements);
  };
  scheduler.resume = function() {
    state.paused = false;
    internal.pump();
    return scheduler;
  };
  return scheduler;
};
